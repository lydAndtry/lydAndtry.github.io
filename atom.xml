<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怒放吧德德</title>
  
  <subtitle>一个有梦有戏的人</subtitle>
  <link href="https://lydandtry.github.io/atom.xml" rel="self"/>
  
  <link href="https://lydandtry.github.io/"/>
  <updated>2023-06-27T04:12:01.443Z</updated>
  <id>https://lydandtry.github.io/</id>
  
  <author>
    <name>Liyongde</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式-工厂模式</title>
    <link href="https://lydandtry.github.io/posts/60745/"/>
    <id>https://lydandtry.github.io/posts/60745/</id>
    <published>2023-06-24T23:04:41.000Z</published>
    <updated>2023-06-27T04:12:01.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java设计模式-工厂模式"><a href="#Java设计模式-工厂模式" class="headerlink" title="Java设计模式 -工厂模式"></a>Java设计模式 -工厂模式</h1><blockquote><p>😄 不断学习才是王道<br>🔥 继续踏上学习之路，学之分享笔记<br>👊 总有一天我也能像各位大佬一样<br>🏆 一个有梦有戏的人 @怒放吧德德<br>🌝分享学习心得，欢迎指正，大家一起学习成长！</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在大多情况下，我们都是用new去实例化对象。但是，有时候有的对象的类别有很多种，又存在着共性，就好比如汽车，有奔驰，红旗，宝马等品牌，如果是一个一个去创建类，那就需要创建很多，因此就需要用到工厂模式。</p><h2 id="1、普通工厂-Simple-Factory-模式"><a href="#1、普通工厂-Simple-Factory-模式" class="headerlink" title="1、普通工厂(Simple Factory)模式"></a>1、普通工厂(Simple Factory)模式</h2><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。<br>UML如图：<br><img src="https://img1.imgtp.com/2023/06/24/9lYQUxph.jpg" alt="简单工厂模式.jpg"></p><h3 id="①、定义类"><a href="#①、定义类" class="headerlink" title="①、定义类"></a>①、定义类</h3><p>首先定义一个汽车抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 产品实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ICar</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ICar</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pickUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提车-&gt;&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义奔驰汽车类和红旗汽车类。并且继承基类<br>奔驰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 奔驰汽车类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzCar</span> <span class="keyword">extends</span> <span class="title class_">ICar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BenzCar</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰旗舰店和客户签订合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>红旗类与奔驰类似，这里就不贴冗余代码了</p><h3 id="②、定义简单的工厂类"><a href="#②、定义简单的工厂类" class="headerlink" title="②、定义简单的工厂类"></a>②、定义简单的工厂类</h3><p>工厂类：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.simpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.entity.BenzCar;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.entity.HongQiCar;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.entity.ICar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NotContextException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 普通工厂模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ICar <span class="title function_">createCar</span><span class="params">(String carId)</span> <span class="keyword">throws</span> NotContextException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (carId) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzCar</span>(<span class="string">&quot;奔驰GLA&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HongQiCar</span>(<span class="string">&quot;红旗H7&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotContextException</span>(<span class="string">&quot;没有该编号的汽车&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③、实例"><a href="#③、实例" class="headerlink" title="③、实例"></a>③、实例</h3><p>测试实验</p><blockquote><p>对调用者来说，就只需要知道createCar方法，指定汽车的编号就可以实例化出对应的对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.entity.ICar;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.simpleFactory.CarFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NotContextException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotContextException &#123;</span><br><span class="line">        <span class="type">ICar</span> <span class="variable">car</span> <span class="operator">=</span> CarFactory.createCar(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        car.contract();</span><br><span class="line">        car.pickUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:<br><img src="https://img1.imgtp.com/2023/06/24/SJmKfwrv.png" alt="截图.png"></p><h2 id="2、抽象工厂-Abstract-Factory-模式"><a href="#2、抽象工厂-Abstract-Factory-模式" class="headerlink" title="2、抽象工厂(Abstract Factory)模式"></a>2、抽象工厂(Abstract Factory)模式</h2><p>抽象工厂模式提供一个接口，不必去指定具体的产品，创建多个产品族的产品对象。对于普通的工厂来说，可以解决一类对象的创建，但是对象有时候很复杂，在有几十种对象中又分了好几种类型，只有一个工厂的话，实现起来就十分复杂，因此需要吧工厂分为很多种，就比如汽车中有奔驰、红旗等，在奔驰中又分为了A级C级等，这就可以吧奔驰，红旗创建各自的工厂，由工厂来划分是具体哪个对象。<br>UML如图：<br><img src="https://img1.imgtp.com/2023/06/24/utlVF1g1.jpg" alt="抽象工厂模式.jpg"></p><h3 id="①、定义类-1"><a href="#①、定义类-1" class="headerlink" title="①、定义类"></a>①、定义类</h3><p>采用以上的Icar抽象类，本次定义了四个类：BenzGLA、BenzGLB、HongQiH5、HongQiH7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.car.entity.benz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.ICar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 奔驰GLA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzGLA</span> <span class="keyword">extends</span> <span class="title class_">ICar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BenzGLA</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰旗舰店和客户签订合同-购买-&gt;&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他类都一样，就不一个一个粘贴</p><h3 id="②、定义工厂接口"><a href="#②、定义工厂接口" class="headerlink" title="②、定义工厂接口"></a>②、定义工厂接口</h3><p>ICarFactory:<br>只提供一个创建产品的接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.car.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.ICar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 汽车工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ICar <span class="title function_">createProduct</span><span class="params">(String CarNo)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义奔驰和红旗的工厂类</p><blockquote><p>两个工厂类也都是差不多，需要实现ICarFactory，并且实现具体方法，在此方法来根据需要生成对应的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.car.factory.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.ICar;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.benz.BenzGLA;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.benz.BenzGLB;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.factory.ICarFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 奔驰汽车的工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzFactory</span> <span class="keyword">implements</span> <span class="title class_">ICarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ICar <span class="title function_">createProduct</span><span class="params">(String CarNo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰工厂&quot;</span>);</span><br><span class="line">        <span class="type">ICar</span> <span class="variable">car</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 根据id创建产品</span></span><br><span class="line">        <span class="keyword">if</span> (CarNo.equals(<span class="string">&quot;GLA&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 生成GLA型号的奔驰汽车</span></span><br><span class="line">            car = <span class="keyword">new</span> <span class="title class_">BenzGLA</span>(CarNo);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (CarNo.equals(<span class="string">&quot;GLB&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 生成GLB型号的奔驰汽车</span></span><br><span class="line">            car = <span class="keyword">new</span> <span class="title class_">BenzGLB</span>(CarNo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (car != <span class="literal">null</span>) <span class="keyword">return</span> car;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>红旗的工厂类同</p></blockquote><p>汽车工厂类：</p><blockquote><p>根据一定的逻辑（本次实验根据编号）来生成对应的工厂，在由工厂去判断实例化哪个对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.car.factory.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.ICar;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.factory.ICarFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 汽车工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> <span class="keyword">implements</span> <span class="title class_">ICarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ICar <span class="title function_">createProduct</span><span class="params">(String CarNo)</span> &#123;</span><br><span class="line">        <span class="type">ICarFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (CarNo.equals(<span class="string">&quot;GLA&quot;</span>) || CarNo.equals(<span class="string">&quot;GLB&quot;</span>)) &#123; <span class="comment">// 如果是奔驰的品牌</span></span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">BenzFactory</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">HongQiFactory</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> factory.createProduct(CarNo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③、实例-1"><a href="#③、实例-1" class="headerlink" title="③、实例"></a>③、实例</h3><p>测试抽象工厂模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.entity.ICar;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.car.factory.impl.CarFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarFactory</span>();</span><br><span class="line">        <span class="type">ICar</span> <span class="variable">car</span> <span class="operator">=</span> factory.createProduct(<span class="string">&quot;GLA&quot;</span>);</span><br><span class="line">        car.contract();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:<br><img src="https://img1.imgtp.com/2023/06/24/4ibWlCyn.png" alt="截图"></p>]]></content>
    
    
    <summary type="html">在大多情况下，我们都是用new去实例化对象。但是，有时候有的对象的类别有很多种，又存在着共性，就好比如汽车，有奔驰，红旗，宝马等品牌，如果是一个一个去创建类，那就需要创建很多，因此就需要用到工厂模式。</summary>
    
    
    
    <category term="Java设计模式" scheme="https://lydandtry.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://lydandtry.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://lydandtry.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式-责任链模式</title>
    <link href="https://lydandtry.github.io/posts/33900/"/>
    <id>https://lydandtry.github.io/posts/33900/</id>
    <published>2023-06-24T22:39:25.000Z</published>
    <updated>2023-06-27T04:12:01.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java设计模式-责任链模式"><a href="#Java设计模式-责任链模式" class="headerlink" title="Java设计模式 - 责任链模式"></a>Java设计模式 - 责任链模式</h1><blockquote><p>😄 不断学习才是王道<br>🔥 继续踏上学习之路，学之分享笔记<br>👊 总有一天我也能像各位大佬一样<br>🏆 一个有梦有戏的人 @怒放吧德德</p></blockquote><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器可以拦截目标方法，进行一系列的操作。也可以取代代理对象的方法等功能。以下代码用JDK动态代理来实现一个拦截器的逻辑。</p><h3 id="1、接口提供"><a href="#1、接口提供" class="headerlink" title="1、接口提供"></a>1、接口提供</h3><p>首先提供方法接口和实现类作为动态代理拦截的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 普通的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHelloWorld</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.HelloWorldService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHelloWorld</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World! &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、定义拦截器接口Interceptor"><a href="#2、定义拦截器接口Interceptor" class="headerlink" title="2、定义拦截器接口Interceptor"></a>2、定义拦截器接口Interceptor</h3><p>这里定义了三个方法：<strong>before、around、after</strong>，都有：代理对象 <strong>proxy</strong>, 真实对象 <strong>target</strong>, 方法 <strong>method</strong>, 参数 <strong>args</strong></p><ul><li>before方法返回的是Boolean，在真实对象前调用。</li><li>返回true时，反射真实对象的方法，false时，调用around方法<br>最后执行after方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 拦截器接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、定义拦截器实现类"><a href="#3、定义拦截器实现类" class="headerlink" title="3、定义拦截器实现类"></a>3、定义拦截器实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现拦截接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方法前逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不反射被代理对象原有方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;取代了代理对象的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方法后逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、采用JDK动态代理的方式使用拦截器"><a href="#4、采用JDK动态代理的方式使用拦截器" class="headerlink" title="4、采用JDK动态代理的方式使用拦截器"></a>4、采用JDK动态代理的方式使用拦截器</h3><p>构建jdk代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: JDK动态代理使用拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorJdkProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">// 真实对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">interceptorClass</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 拦截器全限定名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InterceptorJdkProxy</span><span class="params">(Object target, String interceptorClass)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="built_in">this</span>.interceptorClass = interceptorClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定委托对象并返回一个【代理占位】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 真实对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">bind</span><span class="params">(Object target, String interceptorClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InterceptorJdkProxy</span>(target, interceptorClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (interceptorClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有设置拦截器则直接反射原有方法</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(proxy, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 通过反射生成拦截器</span></span><br><span class="line">        <span class="type">Interceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> (Interceptor) Class.forName(interceptorClass).newInstance();</span><br><span class="line">        <span class="comment">// 调用前置方法</span></span><br><span class="line">        <span class="keyword">if</span> (interceptor.before(proxy, target, method, args)) &#123;</span><br><span class="line">            <span class="comment">//反射原有方法</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 返回false方法执行around方法</span></span><br><span class="line">            interceptor.around(proxy, target, method, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用后置方法</span></span><br><span class="line">        interceptor.after(proxy, target, method, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、实例"><a href="#5、实例" class="headerlink" title="5、实例"></a>5、实例</h3><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.jdk.InterceptorJdkProxy;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.HelloWorldService;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.impl.HelloWorldServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HelloWorldService</span> <span class="variable">proxy</span> <span class="operator">=</span> (HelloWorldService) InterceptorJdkProxy.bind(<span class="keyword">new</span> <span class="title class_">HelloWorldServiceImpl</span>(), <span class="string">&quot;com.lyd.demo.impl.MyInterceptor&quot;</span>);</span><br><span class="line">        proxy.sayHelloWorld(<span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img1.imgtp.com/2023/06/24/68dCQLuz.png" alt="结果1"></p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>当一个对象在一条链上被多个拦截器拦截处理，当然也可以不拦截处理，这种的设计模式就是责任链模式。可以在这被拦截的期间进行加工处理。就好比如，我们申请请假，需要经过项目经理，再到部门经理，最后到人事。在这期间，经理审批时候可以修改请假天数。本次实验用以上部分代码。</p><h3 id="1、定义拦截器"><a href="#1、定义拦截器" class="headerlink" title="1、定义拦截器"></a>1、定义拦截器</h3><p>这里定义三个拦截器分别是三个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 责任链 - 拦截器1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interceptor1</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器1的before&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Object proxy, Object target, Method method, Object[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器1的after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器2,3也是如此就不粘贴代码了。</p><h3 id="2、责任链上使用拦截器实例"><a href="#2、责任链上使用拦截器实例" class="headerlink" title="2、责任链上使用拦截器实例"></a>2、责任链上使用拦截器实例</h3><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.jdk.InterceptorJdkProxy;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.HelloWorldService;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.impl.HelloWorldServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 责任链模式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponsibilityChainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HelloWorldService</span> <span class="variable">proxy1</span> <span class="operator">=</span> (HelloWorldService) InterceptorJdkProxy.bind(<span class="keyword">new</span> <span class="title class_">HelloWorldServiceImpl</span>(), <span class="string">&quot;com.lyd.demo.impl.Interceptor1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorldService</span> <span class="variable">proxy2</span> <span class="operator">=</span> (HelloWorldService) InterceptorJdkProxy.bind(proxy1, <span class="string">&quot;com.lyd.demo.impl.Interceptor2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorldService</span> <span class="variable">proxy3</span> <span class="operator">=</span> (HelloWorldService) InterceptorJdkProxy.bind(proxy2, <span class="string">&quot;com.lyd.demo.impl.Interceptor3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        proxy3.sayHelloWorld(<span class="string">&quot;怒放吧德德&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img1.imgtp.com/2023/06/24/KOGXMFqs.png" alt="结果2"></p>]]></content>
    
    
    <summary type="html">拦截器可以拦截目标方法，进行一系列的操作。也可以取代代理对象的方法等功能。以下代码用JDK动态代理来实现一个拦截器的逻辑。</summary>
    
    
    
    <category term="Java设计模式" scheme="https://lydandtry.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://lydandtry.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://lydandtry.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式-动态代理</title>
    <link href="https://lydandtry.github.io/posts/27007/"/>
    <id>https://lydandtry.github.io/posts/27007/</id>
    <published>2023-06-24T21:58:34.000Z</published>
    <updated>2023-06-27T04:12:01.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【设计模式】Java设计模式-动态代理"><a href="#【设计模式】Java设计模式-动态代理" class="headerlink" title="【设计模式】Java设计模式 - 动态代理"></a>【设计模式】Java设计模式 - 动态代理</h1><blockquote><p>😄 不断学习才是王道<br>🔥 继续踏上学习之路，学之分享笔记<br>👊 总有一天我也能像各位大佬一样<br>🏆 一个有梦有戏的人 @怒放吧德德<br>🌝最近工作比较忙，没啥时间学习</p></blockquote><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。动态代理就需要建立真实对象和代理对象关系，再去实现代理逻辑方法。<br><strong>Java</strong>中实现动态代理有许多方法，<strong>JDK、CGLIB、Javassist、ASM</strong>，常用的是<strong>JDK</strong>和<strong>CGLIB</strong>，在<strong>spring</strong>中就是使用了这两种，然而<strong>mybatis</strong>还是用了<strong>Javassist</strong>。</p><h2 id="2、JDK动态代理"><a href="#2、JDK动态代理" class="headerlink" title="2、JDK动态代理"></a>2、JDK动态代理</h2><p>提供简单的接口类以及其实现类，在通过建立真是对象与代理对象的关系，并且实现代理逻辑。</p><h3 id="1-、准备接口类"><a href="#1-、准备接口类" class="headerlink" title="(1)、准备接口类"></a>(1)、准备接口类</h3><p>先提供接口类：<br>HelloWorldService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 普通的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHelloWorld</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloWorldServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.HelloWorldService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-、jdk动态代理"><a href="#2-、jdk动态代理" class="headerlink" title="(2)、jdk动态代理"></a>(2)、jdk动态代理</h3><p>在JDK动态代理中，通过bind将真实对象和代理对象绑定起来，实现代理逻辑就要去实现<strong>java.lang.reflect.InvocationHandler</strong>接口，并且去实现invoke方法</p><blockquote><p>①、首先需要声明 bind 方法去建立真实对象与代理对象的关系，把本类中的target保存真实对象。在通过Proxy的newProxyInstance方法来建立并生成对象，target.getClass().getClassLoader()：target本身的类加载器，target.getClass().getInterfaces()：把生成的动态代理对象下挂在接口中，this：当前对象，是定义实现方法逻辑的代理类。<br>②、实现InvocationHandler类中的invoke方法，可以实现代理逻辑，当我们使用了代理对象调度方法后就会进入到invoke方法中。</p></blockquote><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 动态代理绑定和代理逻辑实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyExample</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真实对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立代理对象和真实对象的代理关系，并且返回代理逻辑实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 真实对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">bind</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target; <span class="comment">// 绑定对象</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理方法逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 当前调度方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 当前方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  代理结果返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入代理逻辑方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在调度真实对象之前的服务&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(target, args); <span class="comment">// 相当于调用了sayHelloWorld的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在调度真实对象之后的服务&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-、实例"><a href="#3-、实例" class="headerlink" title="(3)、实例"></a>(3)、实例</h3><p>测试jdk动态代理<br>通过 <strong>HelloWorldService proxy = (HelloWorldService) jdkProxyExample.bind(new HelloWorldServiceImpl());</strong> 去代理对象，然后就是使用proxy去点接口里面的方法了。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.jdk.JdkProxyExample;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.HelloWorldService;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.service.impl.HelloWorldServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试jdk动态代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdkProxyText</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JdkProxyExample</span> <span class="variable">jdkProxyExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkProxyExample</span>();</span><br><span class="line">        <span class="comment">// 绑定关系，因为挂载带接口下，因此声明一个代理对象</span></span><br><span class="line">        <span class="type">HelloWorldService</span> <span class="variable">proxy</span> <span class="operator">=</span> (HelloWorldService) jdkProxyExample.bind(<span class="keyword">new</span> <span class="title class_">HelloWorldServiceImpl</span>()); <span class="comment">// 对象是new 实现类</span></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        proxy.sayHelloWorld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果<br><img src="https://img-blog.csdnimg.cn/13501d3d09a649d7bf147badf00c75b2.png" alt="在这里插入图片描述"><br>可以带入参数：以下是带入参数的例子</p><blockquote><p>在接口中的方法添加参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHelloWorld</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在实现类的实现方法中打印出来</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World! &quot;</span> + name);</span><br></pre></td></tr></table></figure><p>调用方法的时候添加参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">proxy.sayHelloWorld(<span class="string">&quot;lyd&quot;</span>);</span><br></pre></td></tr></table></figure><p>代理模式十分重要，要理解里面的逻辑，可以通过debug打断点去一步一步查看。</p><h2 id="3、CGLIB-动态代理"><a href="#3、CGLIB-动态代理" class="headerlink" title="3、CGLIB 动态代理"></a>3、CGLIB 动态代理</h2><p>JDK动态代理需要接口才能完成，而如果不提供接口，只有实现的方法类，可以使用三方插件CGLIB来动态代理，采用这个动态代理技术，需要引入三方jar包，可以搭建maven项目，引入CGLIB <strong>jar包</strong> ，通过maven官网搜索添加，亦可以直接下载jar文件。</p><h3 id="1-、加入CGLIB依赖"><a href="#1-、加入CGLIB依赖" class="headerlink" title="(1)、加入CGLIB依赖"></a>(1)、加入CGLIB依赖</h3><p>maven引入依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-、准备实现类"><a href="#2-、准备实现类" class="headerlink" title="(2)、准备实现类"></a>(2)、准备实现类</h3><p>准备一个实现类，cglib不需要接口，只要实现就可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldServiceImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHelloWorld</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World! &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-、代理类"><a href="#3-、代理类" class="headerlink" title="(3)、代理类"></a>(3)、代理类</h3><p>代理类需要<strong>MethodInterceptor</strong>去实现方法</p><blockquote><p>这里使用了增强者enhancer，通过设置超类和使用setCallback方法设置代理类，CGLIB是通过invokeSuper方法代理逻辑的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyExample</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成CGLIB对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls -----对象类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Class的CGLIB代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(Class cls)</span> &#123;</span><br><span class="line">        <span class="comment">//CGLIB的增强类对象</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置增强对象</span></span><br><span class="line">        enhancer.setSuperclass(cls);</span><br><span class="line">        <span class="comment">//定义代理逻辑对象为当前对象，要求对象实现MethodInterceptor方法</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//生成返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span>  enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理逻辑方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 方法代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理逻辑返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 异常处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用对象之前&quot;</span>);</span><br><span class="line">        <span class="comment">//使用CGLIB反射真实对象的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用对象之后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-、实例"><a href="#4-、实例" class="headerlink" title="(4)、实例"></a>(4)、实例</h3><p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.cglib.CglibProxyExample;</span><br><span class="line"><span class="keyword">import</span> com.lyd.demo.impl.HelloWorldServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试CGLIB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CGLIBProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CglibProxyExample</span> <span class="variable">cglibProxyExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxyExample</span>();</span><br><span class="line">        <span class="type">HelloWorldServiceImpl</span> <span class="variable">proxy</span> <span class="operator">=</span> (HelloWorldServiceImpl) cglibProxyExample.getProxy(HelloWorldServiceImpl.class); <span class="comment">// 获取对象,可以不需要接口类</span></span><br><span class="line">        proxy.sayHelloWorld(<span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果<br><img src="https://img-blog.csdnimg.cn/750d26e40ae0495d8890d2facf5f41c7.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。动态代理就需要建立真实对象和代理对象关系，再去实现代理逻辑方法。</summary>
    
    
    
    <category term="Java设计模式" scheme="https://lydandtry.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://lydandtry.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://lydandtry.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式-反射机制</title>
    <link href="https://lydandtry.github.io/posts/25987/"/>
    <id>https://lydandtry.github.io/posts/25987/</id>
    <published>2023-06-24T15:02:06.000Z</published>
    <updated>2023-06-27T04:12:01.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java设计模式-反射机制"><a href="#Java设计模式-反射机制" class="headerlink" title="Java设计模式 - 反射机制"></a>Java设计模式 - 反射机制</h1><blockquote><p>&#x1f604; 不断学习才是王道<br>🔥 继续踏上学习之路，学之分享笔记<br>👊 总有一天我也能像各位大佬一样<br>🏆 关注我的CSDN：<a href="https://blog.csdn.net/qq_43843951?spm=1011.2415.3001.5343">一个有梦有戏的人</a><br>👊 打算连载Java设计模式，记录自己的学习心得，分享学习经验。</p></blockquote><h2 id="Java反射技术"><a href="#Java反射技术" class="headerlink" title="Java反射技术"></a>Java反射技术</h2><blockquote><p>反射的应用机制广泛，能够配置类的全限定名(包名 + 类型名)、方法和参数，完成对象的初始化，并且可以大大增强Java的可配置性，SpringIOC的基本原理就是如此。</p><h3 id="1、通过反射构建对象"><a href="#1、通过反射构建对象" class="headerlink" title="1、通过反射构建对象"></a>1、通过反射构建对象</h3><p>反射构建对象可以是有参和无参。<br><strong>无参：</strong><br>先定义<strong>ReflectDemo</strong>类，并且有个无参数的方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射机制！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射去构建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射去构建</span></span><br><span class="line"><span class="keyword">public</span> ReflectDemo <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ReflectDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        object = (ReflectDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectDemo&quot;</span>).newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是通过<strong>Class</strong>的<strong>forName()</strong>去找到这个类，在通过<strong>newInstance()</strong>方法创建实例。<br>给类加载器去注册了一个类<strong>ReflectDemo</strong>的全限定名</p><blockquote><p>object = (ReflectDemo) Class.forName(“com.lyd.demo.reflect.ReflectDemo”).newInstance();</p></blockquote><p>含参:<br>先定义<strong>ReflectParamDemo</strong>类，并且有个含参数的方法以及其构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectParamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectParamDemo</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字: &quot;</span> + name + <span class="string">&quot; 年龄: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，根据Class.forName去创建实例，但是需要注意的是，需要加上参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射去构建</span></span><br><span class="line"><span class="keyword">public</span> ReflectParamDemo <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ReflectParamDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        object = (ReflectParamDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectParamDemo&quot;</span>)</span><br><span class="line">                .getConstructor(String.class, <span class="type">int</span>.class)</span><br><span class="line">                .newInstance(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getConstructor()，带入参数类型</p><blockquote><p>object = (ReflectParamDemo) Class.forName(“com.lyd.demo.reflect.ReflectParamDemo”)<br>.getConstructor(String.class, int.class)<br>.newInstance(“李四”, 18);</p></blockquote><h3 id="2、反射方法"><a href="#2、反射方法" class="headerlink" title="2、反射方法"></a>2、反射方法</h3><p>无参：<br>暂时先演示反射方法，所以用<strong>new</strong>的方法来创建实例<strong>target</strong>，具体的代码请看实例， 通过<strong>ReflectDemo.class.getMethod(“sayHello”);</strong>可以获取到类中的方法，并且通过invoke<strong>加粗样式</strong>方法完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">reflectMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">retuenObj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ReflectDemo</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectDemo</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectDemo.class.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        retuenObj = method.invoke(target);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retuenObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>target: 指定对象<br>invoke(target)：调用哪个对象中的方法，如果是含参的，可以在后面添加参数，可以是多个参数</p></blockquote><h3 id="3、实例："><a href="#3、实例：" class="headerlink" title="3、实例："></a>3、实例：</h3><p>综合反射对象与方法<br>无参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">reflect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ReflectDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        object = (ReflectDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectDemo&quot;</span>).newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectDemo.class.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        method.invoke(object);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">reflect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ReflectParamDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        object = (ReflectParamDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectParamDemo&quot;</span>)</span><br><span class="line">                .getConstructor(String.class, <span class="type">int</span>.class)</span><br><span class="line">                .newInstance(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectParamDemo.class.getMethod(<span class="string">&quot;sayHello&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">        method.invoke(object, <span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码"></a>总体代码</h2><p>ReflectDemo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 反射机制-无参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射机制！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射去构建</span></span><br><span class="line">    <span class="keyword">public</span> ReflectDemo <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReflectDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = (ReflectDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectDemo&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">reflectMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">retuenObj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ReflectDemo</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectDemo</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectDemo.class.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">            retuenObj = method.invoke(target);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retuenObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">reflect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReflectDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = (ReflectDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectDemo&quot;</span>).newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectDemo.class.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">            method.invoke(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ReflectParamDemo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 反射机制-带参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectParamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectParamDemo</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字: &quot;</span> + name + <span class="string">&quot; 年龄: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射去构建</span></span><br><span class="line">    <span class="keyword">public</span> ReflectParamDemo <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReflectParamDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = (ReflectParamDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectParamDemo&quot;</span>)</span><br><span class="line">                    .getConstructor(String.class, <span class="type">int</span>.class)</span><br><span class="line">                    .newInstance(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">reflect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ReflectParamDemo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = (ReflectParamDemo) Class.forName(<span class="string">&quot;com.lyd.demo.reflect.ReflectParamDemo&quot;</span>)</span><br><span class="line">                    .getConstructor(String.class, <span class="type">int</span>.class)</span><br><span class="line">                    .newInstance(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectParamDemo.class.getMethod(<span class="string">&quot;sayHello&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">            method.invoke(object, <span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：ReflectTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyd.demo.reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 反射机制测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022-08-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ReflectDemo.reflect();</span><br><span class="line">        ReflectParamDemo.reflect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:<br><img src="https://s2.loli.net/2023/06/24/F39akm5z4SctlDY.png" alt="截图.png"></p>]]></content>
    
    
    <summary type="html">反射的应用机制广泛，能够配置类的全限定名(包名 + 类型名)、方法和参数，完成对象的初始化，并且可以大大增强Java的可配置性，SpringIOC的基本原理就是如此。</summary>
    
    
    
    <category term="Java设计模式" scheme="https://lydandtry.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://lydandtry.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Java" scheme="https://lydandtry.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>锁的机制与底层优化原理</title>
    <link href="https://lydandtry.github.io/posts/53870/"/>
    <id>https://lydandtry.github.io/posts/53870/</id>
    <published>2023-06-19T20:13:33.000Z</published>
    <updated>2023-06-27T04:12:01.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【多线程与高并发】-锁的机制与底层优化原理"><a href="#【多线程与高并发】-锁的机制与底层优化原理" class="headerlink" title="【多线程与高并发】- 锁的机制与底层优化原理"></a>【多线程与高并发】- 锁的机制与底层优化原理</h1><p><img src="https://s2.loli.net/2023/06/21/8OdFqoz1WukpYaS.jpg" alt="锁的机制与底层优化原理.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近经常研究一些关于线程并发的问题，再开发中也实实在在遇到过许多的并发问题，之前所学的是如何解决这些问题，然而接下来就得理解一下底层原理。</p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>首先用一个简单的例子来进行对锁的开篇认知。</p><p>如下代码，我们定义一个类，在这个类中提供了一个自增的方法。我们通过多线程的方式去执行自增，并且主线程也加入进行自增，最后输出这个值。这段代码都知道在自增的时候会出现并发问题，我们在通过加锁，控制对互斥资源的访问，最后就能得到期望的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoAccretion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">                number.autoAccretion(); <span class="comment">// 自增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 主线程也执行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            number.autoAccretion();</span><br><span class="line">        &#125;</span><br><span class="line">        thread.join();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%sms&quot;</span>, endTime - startTime));</span><br><span class="line">        System.out.println(number.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过执行会发现，这个值并不是我们期望所得到的，这是因为这里面出现了并发的问题。</p><p><img src="https://s2.loli.net/2023/06/21/Xwq4smxauUvz1ZV.png" alt="image-20230603143159955.png"></p><p>当然，我们都知道要想解决这个并发问题，只需要在调用对象的方法上加上<code>synchronized</code> 就行。</p><h2 id="锁的机制"><a href="#锁的机制" class="headerlink" title="锁的机制"></a>锁的机制</h2><p>通过以上代码，我们使用synchronized锁来控制对num++的执行，当多个线程进来的时候，只有一个锁能拿到synchronized这把锁。</p><h3 id="1、jdk1-6之前"><a href="#1、jdk1-6之前" class="headerlink" title="1、jdk1.6之前"></a>1、jdk1.6之前</h3><p>在jdk1.6以前，真正加锁的对象是synchronized内部的monitor对象[1]；那么，如果拿不到synchronized锁的线程最后会是怎样的呢？他会放到一个队列中（即重量级锁），直到锁被释放后才能让下个线程拿到锁，这是jdk1.6以前的做法，如果一直不释放锁，那么就会导致这些等待线程一直处于等待，很明显这样会导致性能的问题。</p><p>在来说一下重量级锁，在底层可能出现线程阻塞，上下文切换，等待得到锁的线程将锁释放掉，通过操作系统对线程的调度，将阻塞态的线程唤醒。操作系统实现线程的切换还需要从用户态切换到核心态，成本非常高。</p><blockquote><p>[1]在操作系统和并发编程领域中，Monitor（监视器）是一种同步机制，用于控制对共享资源的访问。它可以用于确保在任何时刻只有一个线程能够进入临界区（Critical Section）并执行相关操作，从而实现线程安全。</p></blockquote><p><img src="https://s2.loli.net/2023/06/21/nXSZyt19IWE8khG.png" alt="线程锁1.png"></p><h3 id="2、CAS机制"><a href="#2、CAS机制" class="headerlink" title="2、CAS机制"></a>2、CAS机制</h3><p>CAS（Compare and Swap）简单说就是比较并交换，它是一种并发编程中常用的原子操作，用于实现无锁的线程安全操作。它通常用于解决多个线程同时对同一个共享变量进行修改的竞争问题。我们通常将cas称为无锁、自旋锁、乐观锁以及轻量级锁。</p><blockquote><p>CAS操作包含三个操作数：内存位置（或称为期望值），当前值和新值。CAS操作会比较内存位置的当前值与期望值是否相等，如果相等，则将内存位置的值更新为新值；如果不相等，则不进行任何操作。CAS操作是原子的，即在执行过程中不会被其他线程中断。它通过比较当前值和期望值来确定内存位置是否被修改，从而避免了传统的锁机制带来的竞争和阻塞。</p></blockquote><p>CAS的大致流程如下：</p><p>​        ①获取内存中的原始值，即备份数据。</p><p>​        ②进行比较，将当前值与期望值进行比对看是否相等。</p><p>​        ③如果相等，就将当前值覆盖旧的值，反之通过循环，重复操作，直到获得到对的值。</p><p>我们最常见的AtomicInteger类，他就是属于原子性操作的，它可以在并发环境下进行原子操作，确保对整数的操作是线程安全的。如下代码，我们可以通过这个类的自增方法来替换用synchronized锁包围的自增运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoAccretion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        synchronized (this) &#123;</span></span><br><span class="line">    <span class="comment">//            num++;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    atomicInteger.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看它的底层代码，通过unsafe类调用自增方法，实际底层原理也是进行比较交换的规则来保证原子性。会先获取内部原始的值，在将这个值自增1，在进行比较，如果当前值等于期望值，则自动将值设置为给定的更新值。但是，如果比较不相等，可能是在获取原始值之后做自增的时候，原始值已经被其他线程给操作成功覆盖了，则这个新的值是错误，需要刷新备份数据，再去循环尝试，直到得到对的数据才会去刷新旧值。大量的线程过来执行这个compareAndSet方法，如果在执行的时候没有被其他线程执行，那就能够将新的值将旧的值替换掉，就算说是失败了，能够通过循环继续执行，在多线程的执行能够确保数据的正确性，至于线程的先后执行也只是看运气。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unsafe.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4)); <span class="comment">// 最后的底层原理通过循环自备份，自增与比较</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到内部代码是看不到的，它底层是通过c++编写的。Java中的CAS操作都是通过sun包下Unsafe类实现，而Unsafe类中的方法都是native方法，表示该方法的实现是由外部的本地代码，这里我下载了lookaside_java-1.8.0-openjdk的源码(可以从github上拉取)，可以从host底层来看源码。</p><p><img src="https://s2.loli.net/2023/06/21/tV47NXn3DfHAEK8.png" alt="image-20230612205419845.png"></p><p>就AtomicInteger内的compareAndSwapInt方法，我们通过jdk1.8的 <code>hotspot/src/share/vm/prims/unsafe.cpp</code> 下的源码可以看到底层由c++编写。它使用原子比较和交换操作来比较和替换指定内存地址上的整数值，并返回比较结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jboolean, <span class="built_in">Unsafe_CompareAndSwapInt</span>(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  <span class="built_in">UnsafeWrapper</span>(<span class="string">&quot;Unsafe_CompareAndSwapInt&quot;</span>);</span><br><span class="line">  <span class="comment">// We are about to write to this entry so check to see if we need to copy it.</span></span><br><span class="line">  <span class="comment">// 执行了一个写屏障操作（write barrier），用于保证在修改对象之前进行必要的处理。</span></span><br><span class="line">  <span class="comment">// JNIHandles::resolve(obj)将obj从JNI句柄解析为Java对象，并使用oopDesc::bs()执行写屏障操作。</span></span><br><span class="line">  oop p = oopDesc::<span class="built_in">bs</span>()-&gt;<span class="built_in">write_barrier</span>(JNIHandles::<span class="built_in">resolve</span>(obj));</span><br><span class="line">  jint* addr = (jint *) <span class="built_in">index_oop_from_field_offset_long</span>(p, offset);<span class="comment">// 计算出要进行原子比较和交换操作的内存地址</span></span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::<span class="built_in">cmpxchg</span>(x, addr, e)) == e; <span class="comment">// 核心代码 执行原子的比较和交换操作</span></span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure><blockquote><p><strong>(jint)(Atomic::cmpxchg(x, addr, e)) == e;</strong>: 这一行代码是主要的核心代码，使用<strong>Atomic::cmpxchg</strong>函数执行原子的比较和交换操作。它尝试将<strong>addr</strong>指向的内存地址上的值与e进行比较，如果相等，则将其替换为x。最后，它将比较结果与e进行比较，如果相等，则返回true，否则返回false。</p></blockquote><p>接下来在jdk1.8的源码：atomic_linux_x86.inline.hpp中看一下这个核心代码的底层逻辑，这段代码会先通过操作系统的内核方法判断是否为多处理器系统，在通过LOCK_IF_MP获取lock指令，实际上拿到的汇编指令lock与cmpxchgl来实现原子性。当拿到lock指令的时候就能给进行比较并交换，没有得到锁的情况需要等待锁被释放，这就达到了原子性问题。当缓存不是很大的情况是使用缓存行锁，但如果超过了缓存行大小，就会使用总线锁。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> jint <span class="title">Atomic::cmpxchg</span> <span class="params">(jint exchange_value, <span class="keyword">volatile</span> jint* dest, jint compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> mp = os::<span class="built_in">is_MP</span>(); <span class="comment">// 调用操作系统内核方法用于判断当前的系统是否为多处理器系统。</span></span><br><span class="line">  <span class="comment">// LOCK_IF_MP获取lock指令，他是判断是否位多处理器</span></span><br><span class="line">  <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(LOCK_IF_MP(%<span class="number">4</span>) <span class="string">&quot;cmpxchgl %1,(%3)&quot;</span> <span class="comment">// 汇编指令，前面已经定义#define LOCK_IF_MP(mp) &quot;cmp $0, &quot; #mp &quot;; je 1f; lock; 1: &quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;=a&quot;</span> (exchange_value)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;r&quot;</span> (exchange_value), <span class="string">&quot;a&quot;</span> (compare_value), <span class="string">&quot;r&quot;</span> (dest), <span class="string">&quot;r&quot;</span> (mp)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> exchange_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized底层的锁优化机制"><a href="#Synchronized底层的锁优化机制" class="headerlink" title="Synchronized底层的锁优化机制"></a>Synchronized底层的锁优化机制</h2><h3 id="1、锁的状态升级变迁"><a href="#1、锁的状态升级变迁" class="headerlink" title="1、锁的状态升级变迁"></a>1、锁的状态升级变迁</h3><p>在jdk1.6以后Synchronized锁引用了许多状态切换：无状态、偏向锁、轻量级锁、重量级锁，根据不同的条件进行状态的切换升级，能够在一定的程度中使性能提升。</p><h4 id="1-、锁状态mark-word结构"><a href="#1-、锁状态mark-word结构" class="headerlink" title="(1)、锁状态mark word结构"></a>(1)、锁状态mark word结构</h4><p>synchronized锁在线程第一次访问的时候，实际上是没有加锁的，只是在mark word中记录了线程ID，这种就是偏向锁，默认是认为不会有多个线程抢着用，mark word是通过64bit来表示的，通过最低2位也就是锁标志位，偏向锁与无锁的值是01，轻量级锁用00表示，重量级锁用10表示，标记了GC的用11表示，无锁与偏向锁低2位是一致的，在倒数第3位有1位来表示偏向锁位：值为1表示偏向锁。</p><p><img src="https://s2.loli.net/2023/06/21/Poki3GF5W2RDEHb.png" alt="image-20230613131954515.png"></p><h4 id="2-、锁升级流程"><a href="#2-、锁升级流程" class="headerlink" title="(2)、锁升级流程"></a>(2)、锁升级流程</h4><p>在Java中，synchronized锁的状态可以根据竞争情况进行升级和降级,结合上图，我们就可以清晰的了解synchronized底层锁的状态变化过程。</p><p>初始状态下，对象没有被任何线程锁定，此时是无状态锁；当有一个线程第一次进入synchronized代码块时，JVM会偏向该线程，将锁的对象头标记为偏向锁，此时还会记录这个线程ID，能够直接进入同步块，标记偏向线程id是为了等下次线程过来访问的时候，会进行线程id比较，如果相同，就能够获取这把锁；然而，当多个线程来争抢这把锁，这时候就会进行锁升级，会将偏向锁升级为轻量级锁，它会使用CAS操作来尝试将锁的对象头设置为指向锁记录（Lock Record）的指针，如果CAS成功，就能够获得这把锁，如果获得不到，会通过自旋；当轻量级锁竞争失败时，锁会升级为重量级锁。此时，JVM会使用操作系统的互斥量（Mutex）来实现锁的互斥操作。重量级锁涉及到用户态和内核态之间的切换，开销较大。</p><p><img src="https://s2.loli.net/2023/06/21/MG793bamDBesr1d.png" alt="image-20230611235859502.png"></p><h4 id="3-、轻量级锁一定比重量级锁性能高吗？"><a href="#3-、轻量级锁一定比重量级锁性能高吗？" class="headerlink" title="(3)、轻量级锁一定比重量级锁性能高吗？"></a>(3)、轻量级锁一定比重量级锁性能高吗？</h4><p>当线程足够多的时候，如果使用轻量级锁，很多个线程会自旋，没有成功将会一直自旋，这样还会消耗cpu，此时还不如直接放在队列中使用重量级锁。总的来说如果竞争不激烈，轻量级锁可以提供更好的性能。而在高度竞争的情况下，重量级锁可能更适合，避免了自旋和不断重试的开销。在实际使用中，需要根据具体情况进行评估和测试，选择适当的锁机制。</p><h3 id="2、synchronized锁升级状态变化原理"><a href="#2、synchronized锁升级状态变化原理" class="headerlink" title="2、synchronized锁升级状态变化原理"></a>2、synchronized锁升级状态变化原理</h3><p>接下来我们从代码的形式来了解synchronized锁的升级状态变化。</p><p>因为使用了 java对象的内存布局以及使用ClassLayout查看布局,首先需要导入依赖, 0.13是显示二进制，0.17最新版本是显示十六进制。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  java对象的内存布局以及使用ClassLayout查看布局  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在main方法中，通过ClassLayout查看布局，这里User只是定义的一个对象实体，里面包含id和name属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">userTemp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="comment">/*java对象的内存布局以及使用ClassLayout查看布局*/</span></span><br><span class="line">System.out.println(<span class="string">&quot;无状态(001)：&quot;</span> + ClassLayout.parseInstance(userTemp).toPrintable());</span><br></pre></td></tr></table></figure><p>我们看一下这段代码的输出，可以对照锁的状态图来看，这些信息包含对象头mark，class，还有对象属性，最后4字节是对齐位，因为位数是8的整数倍。mark由8个字节，64bit组成，以下是十六进制，我们转换成二进制：0…..001对比锁状态图来看是无锁状态。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">无状态(<span class="number">001</span>)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000000000001</span> (non-biasable; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p>先给出全部代码，后面针对代码进行解析，通过这段代码，就能够清晰看见锁是如何升级的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: synchronized锁升级状态变化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2023/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockUpgrade</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123; <span class="comment">// 主线程</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userTemp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">/*java对象的内存布局以及使用ClassLayout查看布局*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无状态(001)：&quot;</span> + ClassLayout.parseInstance(userTemp).toPrintable());</span><br><span class="line">        <span class="comment">// jvm默认延迟4s自动开机偏向锁，可以通过-XX:BiasedLockingStartupDelay = 0 取消延迟</span></span><br><span class="line">        <span class="comment">// 如果不需要偏向锁，使用-XX:- UseBiasedLocking = false 关闭</span></span><br><span class="line">        <span class="comment">// -&gt; 一开始是不会自动使用偏向锁的，如果一开始就使用synchronized锁，就会直接使用重量级锁，jvm中需要延迟4s才能够开启偏向锁。所以这里延迟了5s</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 偏向锁认为一开始只有一个线程来访问</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// 重新new一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;启用偏向锁(101)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123; <span class="comment">// 加上偏向锁</span></span><br><span class="line">                System.out.println(<span class="string">&quot;偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 虽然这里会释放偏向锁，但实际上不会主动释放，头部（高54位）是不会做修改的，这些数值代表属于哪个线程</span></span><br><span class="line">            <span class="comment">// 在偏向锁中，高54位来标识线程id，主要是如果同个线程过来的，就直接走这个偏向锁</span></span><br><span class="line">            System.out.println(<span class="string">&quot;释放偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123; <span class="comment">// 多个线程竞争，可能升级为轻量级锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;轻量级锁(00)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;睡眠3秒钟==========================================&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;轻量级锁升级重量级锁(10)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 开启新的线程, 第一个线程还在睡眠中，意味着线程还没有结束，此时第二个线程就执行了，这样就会导致多个线程的访问，这是就会升级位重量级锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重量级锁(10)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：</p><p>首先是无锁的状态，这个在前面已经介绍了，现在就不再继续赘述。我们要知道，jvm默认是延迟4s才自动开机偏向锁，我们可以通过<code>-XX:BiasedLockingStartupDelay = 0</code> 取消延迟。</p><p>一开始是不会自动使用偏向锁的，如果一开始就使用synchronized锁，就会直接使用重量级锁，jvm中需要延迟4s才能够开启偏向锁。所以这里延迟了5s。</p><p>重新new一个对象，此时我们可以看到下启用了偏向锁，注意，这里虽然还没有上锁，但是锁的使用是需要先开启锁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// 重新new一个对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;启用偏向锁(101)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br></pre></td></tr></table></figure><p>看一下控制台的输出，可以看到头部mark信息，转换二进制就是000…….0101，这可以看到偏向锁就已经启用了，但是我们观察到偏向线程id的54bit都是0，显然这时候还没有上锁，只是开启了偏向锁而已。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启用偏向锁(<span class="number">101</span>)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000000000005</span> (biasable; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p>通过for循环，主线程两次访问user这把锁，此时启动的是偏向锁，这里是携带了线程id，在偏向锁中，高54位来标识线程id，主要是如果同个线程过来的，就直接走这个偏向锁。输出完后释放偏向锁，实际上不会主动释放，头部高54位并没有做修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (user) &#123; <span class="comment">// 加上偏向锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 虽然这里会释放偏向锁，但实际上不会主动释放，头部（高54位）是不会做修改的，这些数值代表属于哪个线程</span></span><br><span class="line">    <span class="comment">// 在偏向锁中，高54位来标识线程id，主要是如果同个线程过来的，就直接走这个偏向锁</span></span><br><span class="line">    System.out.println(<span class="string">&quot;释放偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是主线程来两次访问，线程id都是相同的，根据头mark的二进制可以解出线程id：000….001100111111010100这是将0x00000000033f5005转换成二进制，取高54位的来。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">释放偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">释放偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p>刚刚跑的是主线程，我们可以创建一个新的线程，使得多个线程竞争，这就可能将偏向锁升级为轻量级锁。当线程获取到轻量级锁，其他线程进来会拿不到，此时会自旋。这里我们睡眠3s，来模拟线程紧握锁不放，这时候我们在开一个新的线程，还是来争抢user这把锁，这就导致CAS自旋失败，锁膨胀就会将轻量级锁升级为重量级锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123; <span class="comment">// 多个线程竞争，可能升级为轻量级锁</span></span><br><span class="line">    <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;轻量级锁(00)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;睡眠3秒钟==========================================&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;轻量级锁升级重量级锁(10)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 开启新的线程, 第一个线程还在睡眠中，意味着线程还没有结束，此时第二个线程就执行了，这样就会导致多个线程的访问，这是就会升级位重量级锁</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重量级锁(10)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>通过以下日志，我们可以将头mark转换成二进制，取最后两位锁标记位，能够清晰看到轻量级锁升级到重量级锁。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">轻量级锁(<span class="number">00</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">000000002</span>a<span class="number">11</span>ef<span class="number">08</span> (thin lock: <span class="number">0</span>x<span class="number">000000002</span>a<span class="number">11</span>ef<span class="number">08</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">睡眠<span class="number">3</span>秒钟==========================================</span><br><span class="line">轻量级锁升级重量级锁(<span class="number">10</span>)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a (fat lock: <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line">    </span><br><span class="line">重量级锁(<span class="number">10</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a (fat lock: <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h2 id="文章资料"><a href="#文章资料" class="headerlink" title="文章资料"></a>文章资料</h2><p><a href="https://zhuanlan.zhihu.com/p/160185717">https://zhuanlan.zhihu.com/p/160185717</a></p><p><a href="https://juejin.cn/post/6978882583492821023">https://juejin.cn/post/6978882583492821023</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【多线程与高并发】-锁的机制与底层优化原理&quot;&gt;&lt;a href=&quot;#【多线程与高并发】-锁的机制与底层优化原理&quot; class=&quot;headerlink&quot; title=&quot;【多线程与高并发】- 锁的机制与底层优化原理&quot;&gt;&lt;/a&gt;【多线程与高并发】- 锁的机制与底层优化原理</summary>
      
    
    
    
    
    <category term="多线程与高并发" scheme="https://lydandtry.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
