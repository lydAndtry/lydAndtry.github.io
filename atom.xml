<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怒放吧德德</title>
  
  <subtitle>一个有梦有戏的人</subtitle>
  <link href="https://lydandtry.github.io/atom.xml" rel="self"/>
  
  <link href="https://lydandtry.github.io/"/>
  <updated>2023-06-19T12:26:05.801Z</updated>
  <id>https://lydandtry.github.io/</id>
  
  <author>
    <name>Liyongde</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>锁的机制与底层优化原理</title>
    <link href="https://lydandtry.github.io/posts/53870/"/>
    <id>https://lydandtry.github.io/posts/53870/</id>
    <published>2023-06-19T20:13:33.000Z</published>
    <updated>2023-06-19T12:26:05.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【多线程与高并发】-锁的机制与底层优化原理"><a href="#【多线程与高并发】-锁的机制与底层优化原理" class="headerlink" title="【多线程与高并发】- 锁的机制与底层优化原理"></a>【多线程与高并发】- 锁的机制与底层优化原理</h1><p><img src="D:\Documents\锁与线程并发系列\锁的机制与底层优化原理.jpg" alt="锁的机制与底层优化原理"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近经常研究一些关于线程并发的问题，再开发中也实实在在遇到过许多的并发问题，之前所学的是如何解决这些问题，然而接下来就得理解一下底层原理。</p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>首先用一个简单的例子来进行对锁的开篇认知。</p><p>如下代码，我们定义一个类，在这个类中提供了一个自增的方法。我们通过多线程的方式去执行自增，并且主线程也加入进行自增，最后输出这个值。这段代码都知道在自增的时候会出现并发问题，我们在通过加锁，控制对互斥资源的访问，最后就能得到期望的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Number</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoAccretion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">                number.autoAccretion(); <span class="comment">// 自增</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 主线程也执行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            number.autoAccretion();</span><br><span class="line">        &#125;</span><br><span class="line">        thread.join();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%sms&quot;</span>, endTime - startTime));</span><br><span class="line">        System.out.println(number.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过执行会发现，这个值并不是我们期望所得到的，这是因为这里面出现了并发的问题。</p><p><img src="C:\Users\14194\Pictures\Typora\image-20230603143159955.png" alt="image-20230603143159955"></p><p>当然，我们都知道要想解决这个并发问题，只需要在调用对象的方法上加上<code>synchronized</code> 就行。</p><h2 id="锁的机制"><a href="#锁的机制" class="headerlink" title="锁的机制"></a>锁的机制</h2><p>通过以上代码，我们使用synchronized锁来控制对num++的执行，当多个线程进来的时候，只有一个锁能拿到synchronized这把锁。</p><h3 id="1、jdk1-6之前"><a href="#1、jdk1-6之前" class="headerlink" title="1、jdk1.6之前"></a>1、jdk1.6之前</h3><p>在jdk1.6以前，真正加锁的对象是synchronized内部的monitor对象[1]；那么，如果拿不到synchronized锁的线程最后会是怎样的呢？他会放到一个队列中（即重量级锁），直到锁被释放后才能让下个线程拿到锁，这是jdk1.6以前的做法，如果一直不释放锁，那么就会导致这些等待线程一直处于等待，很明显这样会导致性能的问题。</p><p>在来说一下重量级锁，在底层可能出现线程阻塞，上下文切换，等待得到锁的线程将锁释放掉，通过操作系统对线程的调度，将阻塞态的线程唤醒。操作系统实现线程的切换还需要从用户态切换到核心态，成本非常高。</p><blockquote><p>[1]在操作系统和并发编程领域中，Monitor（监视器）是一种同步机制，用于控制对共享资源的访问。它可以用于确保在任何时刻只有一个线程能够进入临界区（Critical Section）并执行相关操作，从而实现线程安全。</p></blockquote><p><img src="D:\Documents\锁与线程并发系列\线程锁1.png" alt="线程锁"></p><h3 id="2、CAS机制"><a href="#2、CAS机制" class="headerlink" title="2、CAS机制"></a>2、CAS机制</h3><p>CAS（Compare and Swap）简单说就是比较并交换，它是一种并发编程中常用的原子操作，用于实现无锁的线程安全操作。它通常用于解决多个线程同时对同一个共享变量进行修改的竞争问题。我们通常将cas称为无锁、自旋锁、乐观锁以及轻量级锁。</p><blockquote><p>CAS操作包含三个操作数：内存位置（或称为期望值），当前值和新值。CAS操作会比较内存位置的当前值与期望值是否相等，如果相等，则将内存位置的值更新为新值；如果不相等，则不进行任何操作。CAS操作是原子的，即在执行过程中不会被其他线程中断。它通过比较当前值和期望值来确定内存位置是否被修改，从而避免了传统的锁机制带来的竞争和阻塞。</p></blockquote><p>CAS的大致流程如下：</p><p>​        ①获取内存中的原始值，即备份数据。</p><p>​        ②进行比较，将当前值与期望值进行比对看是否相等。</p><p>​        ③如果相等，就将当前值覆盖旧的值，反之通过循环，重复操作，直到获得到对的值。</p><p>我们最常见的AtomicInteger类，他就是属于原子性操作的，它可以在并发环境下进行原子操作，确保对整数的操作是线程安全的。如下代码，我们可以通过这个类的自增方法来替换用synchronized锁包围的自增运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoAccretion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        synchronized (this) &#123;</span></span><br><span class="line">    <span class="comment">//            num++;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    atomicInteger.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看它的底层代码，通过unsafe类调用自增方法，实际底层原理也是进行比较交换的规则来保证原子性。会先获取内部原始的值，在将这个值自增1，在进行比较，如果当前值等于期望值，则自动将值设置为给定的更新值。但是，如果比较不相等，可能是在获取原始值之后做自增的时候，原始值已经被其他线程给操作成功覆盖了，则这个新的值是错误，需要刷新备份数据，再去循环尝试，直到得到对的数据才会去刷新旧值。大量的线程过来执行这个compareAndSet方法，如果在执行的时候没有被其他线程执行，那就能够将新的值将旧的值替换掉，就算说是失败了，能够通过循环继续执行，在多线程的执行能够确保数据的正确性，至于线程的先后执行也只是看运气。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unsafe.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4)); <span class="comment">// 最后的底层原理通过循环自备份，自增与比较</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到内部代码是看不到的，它底层是通过c++编写的。Java中的CAS操作都是通过sun包下Unsafe类实现，而Unsafe类中的方法都是native方法，表示该方法的实现是由外部的本地代码，这里我下载了lookaside_java-1.8.0-openjdk的源码(可以从github上拉取)，可以从host底层来看源码。</p><p><img src="D:\Documents\锁与线程并发系列\image-20230612205419845.png" alt="image-20230612205419845"></p><p>就AtomicInteger内的compareAndSwapInt方法，我们通过jdk1.8的 <code>hotspot/src/share/vm/prims/unsafe.cpp</code> 下的源码可以看到底层由c++编写。它使用原子比较和交换操作来比较和替换指定内存地址上的整数值，并返回比较结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jboolean, <span class="built_in">Unsafe_CompareAndSwapInt</span>(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  <span class="built_in">UnsafeWrapper</span>(<span class="string">&quot;Unsafe_CompareAndSwapInt&quot;</span>);</span><br><span class="line">  <span class="comment">// We are about to write to this entry so check to see if we need to copy it.</span></span><br><span class="line">  <span class="comment">// 执行了一个写屏障操作（write barrier），用于保证在修改对象之前进行必要的处理。</span></span><br><span class="line">  <span class="comment">// JNIHandles::resolve(obj)将obj从JNI句柄解析为Java对象，并使用oopDesc::bs()执行写屏障操作。</span></span><br><span class="line">  oop p = oopDesc::<span class="built_in">bs</span>()-&gt;<span class="built_in">write_barrier</span>(JNIHandles::<span class="built_in">resolve</span>(obj));</span><br><span class="line">  jint* addr = (jint *) <span class="built_in">index_oop_from_field_offset_long</span>(p, offset);<span class="comment">// 计算出要进行原子比较和交换操作的内存地址</span></span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::<span class="built_in">cmpxchg</span>(x, addr, e)) == e; <span class="comment">// 核心代码 执行原子的比较和交换操作</span></span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure><blockquote><p><strong>(jint)(Atomic::cmpxchg(x, addr, e)) == e;</strong>: 这一行代码是主要的核心代码，使用<strong>Atomic::cmpxchg</strong>函数执行原子的比较和交换操作。它尝试将<strong>addr</strong>指向的内存地址上的值与e进行比较，如果相等，则将其替换为x。最后，它将比较结果与e进行比较，如果相等，则返回true，否则返回false。</p></blockquote><p>接下来在jdk1.8的源码：atomic_linux_x86.inline.hpp中看一下这个核心代码的底层逻辑，这段代码会先通过操作系统的内核方法判断是否为多处理器系统，在通过LOCK_IF_MP获取lock指令，实际上拿到的汇编指令lock与cmpxchgl来实现原子性。当拿到lock指令的时候就能给进行比较并交换，没有得到锁的情况需要等待锁被释放，这就达到了原子性问题。当缓存不是很大的情况是使用缓存行锁，但如果超过了缓存行大小，就会使用总线锁。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> jint <span class="title">Atomic::cmpxchg</span> <span class="params">(jint exchange_value, <span class="keyword">volatile</span> jint* dest, jint compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> mp = os::<span class="built_in">is_MP</span>(); <span class="comment">// 调用操作系统内核方法用于判断当前的系统是否为多处理器系统。</span></span><br><span class="line">  <span class="comment">// LOCK_IF_MP获取lock指令，他是判断是否位多处理器</span></span><br><span class="line">  <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(LOCK_IF_MP(%<span class="number">4</span>) <span class="string">&quot;cmpxchgl %1,(%3)&quot;</span> <span class="comment">// 汇编指令，前面已经定义#define LOCK_IF_MP(mp) &quot;cmp $0, &quot; #mp &quot;; je 1f; lock; 1: &quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;=a&quot;</span> (exchange_value)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;r&quot;</span> (exchange_value), <span class="string">&quot;a&quot;</span> (compare_value), <span class="string">&quot;r&quot;</span> (dest), <span class="string">&quot;r&quot;</span> (mp)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> exchange_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized底层的锁优化机制"><a href="#Synchronized底层的锁优化机制" class="headerlink" title="Synchronized底层的锁优化机制"></a>Synchronized底层的锁优化机制</h2><h3 id="1、锁的状态升级变迁"><a href="#1、锁的状态升级变迁" class="headerlink" title="1、锁的状态升级变迁"></a>1、锁的状态升级变迁</h3><p>在jdk1.6以后Synchronized锁引用了许多状态切换：无状态、偏向锁、轻量级锁、重量级锁，根据不同的条件进行状态的切换升级，能够在一定的程度中使性能提升。</p><h4 id="1-、锁状态mark-word结构"><a href="#1-、锁状态mark-word结构" class="headerlink" title="(1)、锁状态mark word结构"></a>(1)、锁状态mark word结构</h4><p>synchronized锁在线程第一次访问的时候，实际上是没有加锁的，只是在mark word中记录了线程ID，这种就是偏向锁，默认是认为不会有多个线程抢着用，mark word是通过64bit来表示的，通过最低2位也就是锁标志位，偏向锁与无锁的值是01，轻量级锁用00表示，重量级锁用10表示，标记了GC的用11表示，无锁与偏向锁低2位是一致的，在倒数第3位有1位来表示偏向锁位：值为1表示偏向锁。</p><p><img src="D:\Documents\锁与线程并发系列\image-20230613131954515.png" alt="image-20230613131954515"></p><h4 id="2-、锁升级流程"><a href="#2-、锁升级流程" class="headerlink" title="(2)、锁升级流程"></a>(2)、锁升级流程</h4><p>在Java中，synchronized锁的状态可以根据竞争情况进行升级和降级,结合上图，我们就可以清晰的了解synchronized底层锁的状态变化过程。</p><p>初始状态下，对象没有被任何线程锁定，此时是无状态锁；当有一个线程第一次进入synchronized代码块时，JVM会偏向该线程，将锁的对象头标记为偏向锁，此时还会记录这个线程ID，能够直接进入同步块，标记偏向线程id是为了等下次线程过来访问的时候，会进行线程id比较，如果相同，就能够获取这把锁；然而，当多个线程来争抢这把锁，这时候就会进行锁升级，会将偏向锁升级为轻量级锁，它会使用CAS操作来尝试将锁的对象头设置为指向锁记录（Lock Record）的指针，如果CAS成功，就能够获得这把锁，如果获得不到，会通过自旋；当轻量级锁竞争失败时，锁会升级为重量级锁。此时，JVM会使用操作系统的互斥量（Mutex）来实现锁的互斥操作。重量级锁涉及到用户态和内核态之间的切换，开销较大。</p><p><img src="D:\Documents\锁与线程并发系列\image-20230611235859502.png" alt="image-20230611235859502"></p><h4 id="3-、轻量级锁一定比重量级锁性能高吗？"><a href="#3-、轻量级锁一定比重量级锁性能高吗？" class="headerlink" title="(3)、轻量级锁一定比重量级锁性能高吗？"></a>(3)、轻量级锁一定比重量级锁性能高吗？</h4><p>当线程足够多的时候，如果使用轻量级锁，很多个线程会自旋，没有成功将会一直自旋，这样还会消耗cpu，此时还不如直接放在队列中使用重量级锁。总的来说如果竞争不激烈，轻量级锁可以提供更好的性能。而在高度竞争的情况下，重量级锁可能更适合，避免了自旋和不断重试的开销。在实际使用中，需要根据具体情况进行评估和测试，选择适当的锁机制。</p><h3 id="2、synchronized锁升级状态变化原理"><a href="#2、synchronized锁升级状态变化原理" class="headerlink" title="2、synchronized锁升级状态变化原理"></a>2、synchronized锁升级状态变化原理</h3><p>接下来我们从代码的形式来了解synchronized锁的升级状态变化。</p><p>因为使用了 java对象的内存布局以及使用ClassLayout查看布局,首先需要导入依赖, 0.13是显示二进制，0.17最新版本是显示十六进制。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  java对象的内存布局以及使用ClassLayout查看布局  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在main方法中，通过ClassLayout查看布局，这里User只是定义的一个对象实体，里面包含id和name属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">userTemp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="comment">/*java对象的内存布局以及使用ClassLayout查看布局*/</span></span><br><span class="line">System.out.println(<span class="string">&quot;无状态(001)：&quot;</span> + ClassLayout.parseInstance(userTemp).toPrintable());</span><br></pre></td></tr></table></figure><p>我们看一下这段代码的输出，可以对照锁的状态图来看，这些信息包含对象头mark，class，还有对象属性，最后4字节是对齐位，因为位数是8的整数倍。mark由8个字节，64bit组成，以下是十六进制，我们转换成二进制：0…..001对比锁状态图来看是无锁状态。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">无状态(<span class="number">001</span>)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000000000001</span> (non-biasable; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p>先给出全部代码，后面针对代码进行解析，通过这段代码，就能够清晰看见锁是如何升级的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: synchronized锁升级状态变化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2023/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockUpgrade</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123; <span class="comment">// 主线程</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userTemp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">/*java对象的内存布局以及使用ClassLayout查看布局*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无状态(001)：&quot;</span> + ClassLayout.parseInstance(userTemp).toPrintable());</span><br><span class="line">        <span class="comment">// jvm默认延迟4s自动开机偏向锁，可以通过-XX:BiasedLockingStartupDelay = 0 取消延迟</span></span><br><span class="line">        <span class="comment">// 如果不需要偏向锁，使用-XX:- UseBiasedLocking = false 关闭</span></span><br><span class="line">        <span class="comment">// -&gt; 一开始是不会自动使用偏向锁的，如果一开始就使用synchronized锁，就会直接使用重量级锁，jvm中需要延迟4s才能够开启偏向锁。所以这里延迟了5s</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 偏向锁认为一开始只有一个线程来访问</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// 重新new一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;启用偏向锁(101)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123; <span class="comment">// 加上偏向锁</span></span><br><span class="line">                System.out.println(<span class="string">&quot;偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 虽然这里会释放偏向锁，但实际上不会主动释放，头部（高54位）是不会做修改的，这些数值代表属于哪个线程</span></span><br><span class="line">            <span class="comment">// 在偏向锁中，高54位来标识线程id，主要是如果同个线程过来的，就直接走这个偏向锁</span></span><br><span class="line">            System.out.println(<span class="string">&quot;释放偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123; <span class="comment">// 多个线程竞争，可能升级为轻量级锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;轻量级锁(00)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;睡眠3秒钟==========================================&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;轻量级锁升级重量级锁(10)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 开启新的线程, 第一个线程还在睡眠中，意味着线程还没有结束，此时第二个线程就执行了，这样就会导致多个线程的访问，这是就会升级位重量级锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重量级锁(10)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：</p><p>首先是无锁的状态，这个在前面已经介绍了，现在就不再继续赘述。我们要知道，jvm默认是延迟4s才自动开机偏向锁，我们可以通过<code>-XX:BiasedLockingStartupDelay = 0</code> 取消延迟。</p><p>一开始是不会自动使用偏向锁的，如果一开始就使用synchronized锁，就会直接使用重量级锁，jvm中需要延迟4s才能够开启偏向锁。所以这里延迟了5s。</p><p>重新new一个对象，此时我们可以看到下启用了偏向锁，注意，这里虽然还没有上锁，但是锁的使用是需要先开启锁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// 重新new一个对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;启用偏向锁(101)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br></pre></td></tr></table></figure><p>看一下控制台的输出，可以看到头部mark信息，转换二进制就是000…….0101，这可以看到偏向锁就已经启用了，但是我们观察到偏向线程id的54bit都是0，显然这时候还没有上锁，只是开启了偏向锁而已。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启用偏向锁(<span class="number">101</span>)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000000000005</span> (biasable; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p>通过for循环，主线程两次访问user这把锁，此时启动的是偏向锁，这里是携带了线程id，在偏向锁中，高54位来标识线程id，主要是如果同个线程过来的，就直接走这个偏向锁。输出完后释放偏向锁，实际上不会主动释放，头部高54位并没有做修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (user) &#123; <span class="comment">// 加上偏向锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 虽然这里会释放偏向锁，但实际上不会主动释放，头部（高54位）是不会做修改的，这些数值代表属于哪个线程</span></span><br><span class="line">    <span class="comment">// 在偏向锁中，高54位来标识线程id，主要是如果同个线程过来的，就直接走这个偏向锁</span></span><br><span class="line">    System.out.println(<span class="string">&quot;释放偏向锁(101)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是主线程来两次访问，线程id都是相同的，根据头mark的二进制可以解出线程id：000….001100111111010100这是将0x00000000033f5005转换成二进制，取高54位的来。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">释放偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">释放偏向锁(<span class="number">101</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">00000000033f</span><span class="number">5005</span> (biased: <span class="number">0</span>x<span class="number">000000000000</span>cfd<span class="number">4</span>; epoch: <span class="number">0</span>; age: <span class="number">0</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><p>刚刚跑的是主线程，我们可以创建一个新的线程，使得多个线程竞争，这就可能将偏向锁升级为轻量级锁。当线程获取到轻量级锁，其他线程进来会拿不到，此时会自旋。这里我们睡眠3s，来模拟线程紧握锁不放，这时候我们在开一个新的线程，还是来争抢user这把锁，这就导致CAS自旋失败，锁膨胀就会将轻量级锁升级为重量级锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123; <span class="comment">// 多个线程竞争，可能升级为轻量级锁</span></span><br><span class="line">    <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;轻量级锁(00)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;睡眠3秒钟==========================================&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;轻量级锁升级重量级锁(10)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 开启新的线程, 第一个线程还在睡眠中，意味着线程还没有结束，此时第二个线程就执行了，这样就会导致多个线程的访问，这是就会升级位重量级锁</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重量级锁(10)(带线程ID)：&quot;</span> + ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>通过以下日志，我们可以将头mark转换成二进制，取最后两位锁标记位，能够清晰看到轻量级锁升级到重量级锁。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">轻量级锁(<span class="number">00</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">000000002</span>a<span class="number">11</span>ef<span class="number">08</span> (thin lock: <span class="number">0</span>x<span class="number">000000002</span>a<span class="number">11</span>ef<span class="number">08</span>)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line"></span><br><span class="line">睡眠<span class="number">3</span>秒钟==========================================</span><br><span class="line">轻量级锁升级重量级锁(<span class="number">10</span>)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a (fat lock: <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br><span class="line">    </span><br><span class="line">重量级锁(<span class="number">10</span>)(带线程ID)：cn.lyd.test.service.user.dto.User <span class="keyword">object</span> internals:</span><br><span class="line">OFF  SZ               TYPE DESCRIPTION               VALUE</span><br><span class="line">  <span class="number">0</span>   <span class="number">8</span>                    (<span class="keyword">object</span> header: mark)     <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a (fat lock: <span class="number">0</span>x<span class="number">0000000024232f</span><span class="number">6</span>a)</span><br><span class="line">  <span class="number">8</span>   <span class="number">4</span>                    (<span class="keyword">object</span> header: <span class="keyword">class</span>)    <span class="number">0</span>xf<span class="number">800</span>c<span class="number">143</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">4</span>                int User.id                   <span class="number">0</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">4</span>   java.lang.String User.name                 null</span><br><span class="line"> <span class="number">20</span>   <span class="number">4</span>                    (<span class="keyword">object</span> alignment gap)    </span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure><h2 id="文章资料"><a href="#文章资料" class="headerlink" title="文章资料"></a>文章资料</h2><p><a href="https://zhuanlan.zhihu.com/p/160185717">https://zhuanlan.zhihu.com/p/160185717</a></p><p><a href="https://juejin.cn/post/6978882583492821023">https://juejin.cn/post/6978882583492821023</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【多线程与高并发】-锁的机制与底层优化原理&quot;&gt;&lt;a href=&quot;#【多线程与高并发】-锁的机制与底层优化原理&quot; class=&quot;headerlink&quot; title=&quot;【多线程与高并发】- 锁的机制与底层优化原理&quot;&gt;&lt;/a&gt;【多线程与高并发】- 锁的机制与底层优化原理</summary>
      
    
    
    
    
    <category term="多线程与高并发" scheme="https://lydandtry.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lydandtry.github.io/posts/16107/"/>
    <id>https://lydandtry.github.io/posts/16107/</id>
    <published>2023-06-19T12:26:05.801Z</published>
    <updated>2023-06-19T12:26:05.801Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><div class="tip "><p>default</p></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="web前端" scheme="https://lydandtry.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="web" scheme="https://lydandtry.github.io/tags/web/"/>
    
    <category term="js" scheme="https://lydandtry.github.io/tags/js/"/>
    
  </entry>
  
</feed>
